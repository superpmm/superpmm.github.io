[{"title":"腾讯云主机window_server_2012服务器系统搭建","slug":"腾讯云主机window-server-2012服务器系统搭建","date":"2017-05-01T13:12:47.000Z","updated":"2017-05-02T01:17:12.391Z","comments":true,"path":"2017/05/01/腾讯云主机window-server-2012服务器系统搭建/","link":"","permalink":"http://exploretime.cn/2017/05/01/腾讯云主机window-server-2012服务器系统搭建/","excerpt":"最近博主一直在弄腾讯云主机的系统配置搭建，windows server 2012的系统配置搭建。主要有以下几个步骤：1.安装IIS，在服务器管理界面中添加角色即可(http://bbs.qcloud.com/thread-8420-1-1.html)2.Windows Server 2012 配置指南 之 MySQL环境搭建篇 (http://bbs.qcloud.com/forum.php?mod=viewthread&amp;tid=8422&amp;highlight=Windows%2BServer%2B2012%2B%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97)3.Windows Server 2012 配置指南 之 PHP环境搭建篇(http://bbs.qcloud.com/forum.php?mod=viewthread&amp;tid=8420&amp;highlight=Windows%2BServer%2B2012%2B%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97)4.Windows Server 2012 配置指南 之 开启Zend OPcache加速篇(http://bbs.qcloud.com/forum.php?mod=viewthread&amp;tid=8421&amp;highlight=Windows%2BServer%2B2012%2B%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97) 详细的讲解要上面的链接上会有，但博主要说的是，一个系统配置的搭建，里面会有遇到不少的坑额。我就根据我遇到的坑进行补充说明一下。1.首先是php的版本上，因为上面的php搭建的教程的php链接已经过时的了，博主只能到官网尝试下载，结果下载了好几个版本都是错的，之后才开悟。应该按照教程链接来举一反三，找到它喜爱相对应地址的最新版本：（http://windows.php.net/downloads/releases/php-5.6.30-nts-Win32-VC11-x86.zip） 你们终于找到理由笑博主没你们聪明了，开心吧。2.之后是php配置修改问题，如图(开启Zend OPcache加速篇)：修改配置的时候，请一定要把前面的分号（“;”）去掉，否则只好回家早点洗洗睡咯。","text":"最近博主一直在弄腾讯云主机的系统配置搭建，windows server 2012的系统配置搭建。主要有以下几个步骤：1.安装IIS，在服务器管理界面中添加角色即可(http://bbs.qcloud.com/thread-8420-1-1.html)2.Windows Server 2012 配置指南 之 MySQL环境搭建篇 (http://bbs.qcloud.com/forum.php?mod=viewthread&amp;tid=8422&amp;highlight=Windows%2BServer%2B2012%2B%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97)3.Windows Server 2012 配置指南 之 PHP环境搭建篇(http://bbs.qcloud.com/forum.php?mod=viewthread&amp;tid=8420&amp;highlight=Windows%2BServer%2B2012%2B%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97)4.Windows Server 2012 配置指南 之 开启Zend OPcache加速篇(http://bbs.qcloud.com/forum.php?mod=viewthread&amp;tid=8421&amp;highlight=Windows%2BServer%2B2012%2B%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97) 详细的讲解要上面的链接上会有，但博主要说的是，一个系统配置的搭建，里面会有遇到不少的坑额。我就根据我遇到的坑进行补充说明一下。1.首先是php的版本上，因为上面的php搭建的教程的php链接已经过时的了，博主只能到官网尝试下载，结果下载了好几个版本都是错的，之后才开悟。应该按照教程链接来举一反三，找到它喜爱相对应地址的最新版本：（http://windows.php.net/downloads/releases/php-5.6.30-nts-Win32-VC11-x86.zip） 你们终于找到理由笑博主没你们聪明了，开心吧。2.之后是php配置修改问题，如图(开启Zend OPcache加速篇)：修改配置的时候，请一定要把前面的分号（“;”）去掉，否则只好回家早点洗洗睡咯。3.之后又遇到了一个大问题，就是服务器和自己电脑文件传送的问题。filezilla的client端和filezilla的server端，在自己电脑装的是clent端，在服务器端装的是server端。而且server端的配置要修改一下才行哦，否则传送的文件都接受不了。心碎一地也没卵用。在添加user的里面一定要把read、write选项提勾了。否则，都是泪。","categories":[{"name":"back_end","slug":"back-end","permalink":"http://exploretime.cn/categories/back-end/"}],"tags":[]},{"title":"Node.js实践（二）.使用eventproxy控制并发","slug":"Node-js实践（二）-使用eventproxy控制并发","date":"2017-04-25T13:41:36.000Z","updated":"2017-05-02T01:16:52.738Z","comments":true,"path":"2017/04/25/Node-js实践（二）-使用eventproxy控制并发/","link":"","permalink":"http://exploretime.cn/2017/04/25/Node-js实践（二）-使用eventproxy控制并发/","excerpt":"今天小博主继续学习Node.js，但说实话，一入前端坑似海。我自己从进门、到在创业团队里面打杂、再到公司做实习生，一路坚持学习前端。一路上捡到了许许多多的贝壳，但我停下脚步想前眺望的时候，才发现前面珍贵的贝壳数也数不清。就像前端的知识，真心发现这是好大的世界，还有很远的路可以走。 这次的学习主要摘自《Node.js 包教不包会》，但博主从零基础的角度重新学习并且对原博文做出更多的注释和解释。 先解释下并发的，并发指的是同时发生几个事件，node.js通过非阻塞I/O来处理并发事件。至于node.js阻塞式和非阻塞式的区别，就看（http://www.jianshu.com/p/02f76566fd90）的链接。 之前我们爬取网页的时候，用的是一次的http请求，那么久不会存在并发事件。但问题来了，如果我们想把一个网页里面有许许多多个相同的块（评论、文章标题）爬取出来，如果用的是阻塞式I/O事件，其中任何一个请求失败都将使整个爬取失利。如果用非阻塞式I/O的话，即使某个请求出错，也不会影响最后的大体的爬取效果。 这次学习的目的是：爬取的是cnodejs.org的文章名字，链接、和第一条评论。 the key is that how to analyze the process of crawler.关键而且最重要的是，是整个流程的思路。分析之后可以简单分为几个步骤：一.分析目标网页，找到所要爬取内容的相关信息（位置、类名等）； 二.写爬虫代码； 三.检查效果。","text":"今天小博主继续学习Node.js，但说实话，一入前端坑似海。我自己从进门、到在创业团队里面打杂、再到公司做实习生，一路坚持学习前端。一路上捡到了许许多多的贝壳，但我停下脚步想前眺望的时候，才发现前面珍贵的贝壳数也数不清。就像前端的知识，真心发现这是好大的世界，还有很远的路可以走。 这次的学习主要摘自《Node.js 包教不包会》，但博主从零基础的角度重新学习并且对原博文做出更多的注释和解释。 先解释下并发的，并发指的是同时发生几个事件，node.js通过非阻塞I/O来处理并发事件。至于node.js阻塞式和非阻塞式的区别，就看（http://www.jianshu.com/p/02f76566fd90）的链接。 之前我们爬取网页的时候，用的是一次的http请求，那么久不会存在并发事件。但问题来了，如果我们想把一个网页里面有许许多多个相同的块（评论、文章标题）爬取出来，如果用的是阻塞式I/O事件，其中任何一个请求失败都将使整个爬取失利。如果用非阻塞式I/O的话，即使某个请求出错，也不会影响最后的大体的爬取效果。 这次学习的目的是：爬取的是cnodejs.org的文章名字，链接、和第一条评论。 the key is that how to analyze the process of crawler.关键而且最重要的是，是整个流程的思路。分析之后可以简单分为几个步骤：一.分析目标网页，找到所要爬取内容的相关信息（位置、类名等）； 二.写爬虫代码； 三.检查效果。 首先分析一下cnode.org的首页： 找到文章名字、链接：（请诸君稍微注意） 之后点开第一条博客，按F12查阅代码（为了找第一条评论的代码） 第一步骤完成了，现在开始继续赶路：代码: //模块的引用 var eventproxy = require(&apos;eventproxy&apos;); var superagent = require(&apos;superagent&apos;); var cheerio = require(&apos;cheerio&apos;); var url = require(&apos;url&apos;); //目标地址 var goalUrl = &apos;https://cnodejs.org/&apos;; //进行http请求，这里用superagent（因为爬取的是https） superagent.get(goalUrl) .end(function (err, res) { if (err) { return console.error(err); } var topicUrls = []; var userUrls = []; //将网页的html代码赋值给$ var $ = cheerio.load(res.text); //通过对$遍历从而匹配到文章标题 $(&apos;#topic_list .topic_title&apos;).each(function (idx, element) { var $element = $(element); //resolve用的是JQ的字符串合拼，结果会显示‘https://cnodejs.org/+$element.attr(&apos;href&apos;)’ var href = url.resolve(goalUrl, $element.attr(&apos;href&apos;)); topicUrls.push(href); }); var ep = new eventproxy(); // afeter读取topicUrls目录中所有文件（topicUrls里面为博客的链接，故将返回40条页面的html代码） // ep.after(&apos;del&apos;, files.length, function (topics) { // 在所有文件的异步执行结束后将被执行 // 所有文件的内容都存在topics数组中 }); ep.after(&apos;del&apos;, topicUrls.length, function (topics) { // console.log(topics); topics = topics.map(function (topicPair) { // console.log(topicPair); var topicUrl = topicPair[0]; var topicHtml = topicPair[1]; var $ = cheerio.load(topicHtml); // 输出topicUrls每个子元素的html链接 // console.log(topicUrl); // console.log(topicHtml)输出每个子链接页面的整个网页的html代码 // console.log(topicHtml); return ({ // .trim()去除字符串从头到尾的空格 // .eq()将匹配元素的集合减少到指定索引处的匹配元素 title: $(&apos;.topic_full_title&apos;).text().trim(), href: topicUrl, comment1: $(&apos;.reply_content&apos;).eq(0).text().trim(), // author: $(&apos;.reply_author&apos;).attr(&apos;href&apos;), author: $(&apos;.reply_author&apos;).html(), }); }); console.log(topics); }); //在适当的时候 ep.emit(&apos;event_name&apos;, eventData) topicUrls.forEach(function (topicUrl) { superagent.get(topicUrl) .end(function (err, res) { // console.log(&apos;fetch &apos; + topicUrl + &apos; successful&apos;); ep.emit(&apos;del&apos;, [topicUrl, res.text]); // ep.emit(&apos;halo&apos;,[topicUrl, res.text]); }); }); }); 补充：核心代码其实不长，只不过为了让各位帅哥美女看懂，几乎每行都有注释来让你们更容易理解。三.结果检查，如下图： 总结：这次的并发学习花了不少时间，博主本人也尝试用两次eventproxy来第二次并发获取文章作者的积分数，效果不是很好，应该再转换思路，用其他方法来实现才对。 这次完整详细的代码请直接copy就好，只要你node该安装的部件都安装好了。","categories":[{"name":"front_end","slug":"front-end","permalink":"http://exploretime.cn/categories/front-end/"}],"tags":[{"name":"front-end","slug":"front-end","permalink":"http://exploretime.cn/tags/front-end/"}]},{"title":"Node.js爬虫实战（一）","slug":"Node-js爬虫实战（一）","date":"2017-04-24T15:40:28.000Z","updated":"2017-05-02T01:17:34.709Z","comments":true,"path":"2017/04/24/Node-js爬虫实战（一）/","link":"","permalink":"http://exploretime.cn/2017/04/24/Node-js爬虫实战（一）/","excerpt":"今天小哥很认真地学习了利用Node.js来做爬虫知识，现在是晚上23：41，还是苦逼点做个总结，明天满课又如何。-.- 小哥学习爬虫的经验还是有很多次了，例如大二自学的python爬虫，当那时候我会有一个很大的困惑，因为爬虫保存在本地的代码就像一本厚厚的天书（看不懂代码，一脸懵逼状）。 转眼现在大三下学期，我已经对这些代码毫无畏惧感、而且还感到很熟悉。重新用另外一种方法实现爬虫，觉得好好玩，内心有种很充实的感觉（原谅博主自我感动，哈哈。） 言归正传了，是时候做个小总结了。 此次课程分三个步骤：1.爬虫之前的准备（模块的引用）；2.爬虫代码；3.输出。 先上代码：资源来自《Node.js 包教不包会》（https://github.com/alsotang/node-lessons/tree/master/lesson3）","text":"今天小哥很认真地学习了利用Node.js来做爬虫知识，现在是晚上23：41，还是苦逼点做个总结，明天满课又如何。-.- 小哥学习爬虫的经验还是有很多次了，例如大二自学的python爬虫，当那时候我会有一个很大的困惑，因为爬虫保存在本地的代码就像一本厚厚的天书（看不懂代码，一脸懵逼状）。 转眼现在大三下学期，我已经对这些代码毫无畏惧感、而且还感到很熟悉。重新用另外一种方法实现爬虫，觉得好好玩，内心有种很充实的感觉（原谅博主自我感动，哈哈。） 言归正传了，是时候做个小总结了。 此次课程分三个步骤：1.爬虫之前的准备（模块的引用）；2.爬虫代码；3.输出。 先上代码：资源来自《Node.js 包教不包会》（https://github.com/alsotang/node-lessons/tree/master/lesson3） 一.模块的引用 var express = require(&apos;express&apos;); var cheerio = require(&apos;cheerio&apos;); var superagent = require(&apos;superagent&apos;); 这里面涉及三个引用模块，让我对它们的作用娓娓道来： 1.exprsss,是一个设置中间件来响应HTTP请求（让我们回想一下，浏览器和服务器交流需要的http协议，如用js原生写，有点麻烦）。用express就可以偷懒实现http请求了。 2.cheerio，可以暂时初级等认为是Node.js 版的 jquery； 3.superagent，则是http 方面的库，可以发起 get 或 post 请求。 二.爬虫代码如下： // var url = &apos;https://www.izuiyou.com/home&apos; var app = express(); app.get(&apos;/&apos;, function (req, res, next) { superagent.get(&apos;https://cnodejs.org/&apos;) .end(function (err, sres) { // 常规的错误处理 if (err) { return next(err); } // sres.text 里面存储着网页的 html 内容，将它传给 cheerio.load 之后 // 就可以得到一个实现了 jquery 接口的变量，我们习惯性地将它命名为 `$` // 剩下就都是 jquery 的内容了 var $ = cheerio.load(sres.text); var items = []; $(&apos;#topic_list .pull-right&apos;).each(function (idx, element) { &lt;!--要找到相应需要的内容，先要分析页面的结构才能找到你所需要的东西哦。而且类名中间有空格的化，会匹配不了。 --&gt; var $element = $(element); items.push({ title: $element.attr(&apos;title&apos;), //这里爬取类&apos;pull-right&apos;的title href: $element.attr(&apos;href&apos;) //这里爬取类&apos;pull-right&apos;的href }); }); res.send(items); //在页面输出 }); }) app.listen(3000,function(){ console.log(&apos;app is listening at port 3000&apos;); }) 这只是一种方法而已，还可以用原生的方法实现页面的爬取。后续学习到再补充啦。晚安！","categories":[{"name":"front_end","slug":"front-end","permalink":"http://exploretime.cn/categories/front-end/"}],"tags":[]},{"title":"Sockte.io创建实时聊天（node.js学习笔记）","slug":"Sockte-io创建实时聊天（node-js学习笔记）","date":"2017-04-16T03:00:47.000Z","updated":"2017-05-02T01:17:50.808Z","comments":true,"path":"2017/04/16/Sockte-io创建实时聊天（node-js学习笔记）/","link":"","permalink":"http://exploretime.cn/2017/04/16/Sockte-io创建实时聊天（node-js学习笔记）/","excerpt":"","text":"“小背景”： 这个月一直在积极补习node.js的知识，是时候做一下总结了。这次的project就是创建一个及时聊天室。 首先，从需求分析，完成一个聊天室需要两部分：1.聊天页面（客户端）；2.聊天服务器；3. 客户端和服务器的连接。1.页面： &lt;style&gt; #input{width:200px;} #message{position:fixed;margin:8px;padding:8px;border:1px solid #eeeee;width:400px;height:400px;} &lt;/style&gt; &lt;body&gt; 你的信息： &lt;input type=&quot;text&quot;&gt; &lt;!-- 这是简简单的输入框啦 --&gt; &lt;div id=&quot;message&quot; &gt;&lt;/div&gt; &lt;script&gt; &lt;!-- 待会补充 --&gt; &lt;/script&gt; &lt;/body&gt; 2.聊天室服务器： var http = require(&apos;http&apos;).createServer(handler); var io = require(&apos;socket.io&apos;).listen(httpd); var fs = require(&apos;fs&apos;); httpd.listen(4000); function handler(req,res) { fs.readFile(__dirname + &apos;/index.html&apos;,function(err,data){ if(err){ res.wirteHead(500); return res.end(&apos;Error loading index.html&apos;); } res.writeHead(200); res.end(data); }); } io.sockets.on(&apos;connection&apos;,function(socket) { socket.on(&apos;clientMesage&apos;,function(content) { socket.emit(&apos;serverMessage&apos;,&apos;you said:&apos;, + content); socket.broadcast.emit(&apos;serverMessage&apos;,socket.id + &apos;said:&apos; + content); }); }); 3.服务器和客户端的连接： &lt;script src=&quot;http://localhost:4000/socket.io/socket.io.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot;&gt; var messageElement = document.getElementById(&apos;messages&apos;); var lastMessageElement = null; function addMessage(message) { var newMessageElement = document.createElement(&apos;div&apos;); var newMessageText = document.createTextNode(message); newMessageElement.appenChild(newMessageText); messageElement.insertBefore(newMessageElement,lastMessageElement); lastMessageElement = newMessageElement; } var socket = io.connect(&apos;http://localhost:4000&apos;); socket.on(&apos;serverMessage&apos;,function(content) { addMessage(content); }); var inputElement = document.getElementById(&apos;input&apos;); inputElement.onkeydown = function(keyboarEvent) { if (keyboardEvent.keyCode === 13) { socket.emit(&apos;clientMessage&apos;,inputElement.value); inputElement.value = &apos;&apos;; return false; }else { return true; } }; &lt;/script&gt;","categories":[{"name":"front_end","slug":"front-end","permalink":"http://exploretime.cn/categories/front-end/"}],"tags":[]},{"title":"生活的意义在于它的美","slug":"生活的意义在于它的美","date":"2017-04-06T14:08:16.000Z","updated":"2017-04-07T11:54:40.321Z","comments":true,"path":"2017/04/06/生活的意义在于它的美/","link":"","permalink":"http://exploretime.cn/2017/04/06/生活的意义在于它的美/","excerpt":"追寻生命的意义&nbsp; 虽然博主是个标准的理工男，高数、理论力学、传动控制等一大堆逻辑性较强的学科都能学得有模有样，但博主却也时常“为赋新词强说愁”般会考虑一些比较“没用”的东西。举个栗子，我活着是为了什么？–（你系不系傻？） 高中毕业的暑假，卧在床头完完整整地看完了余华的《活着》，哭哭啼啼地看一个老地主的儿子（“富二代”）跌跌撞撞、充满不幸、动荡的人生，当然他在故事里是活到最久的了。活生生地告诉着一个永恒不变的真理——活着就是为了活着，为了活下去。","text":"追寻生命的意义&nbsp; 虽然博主是个标准的理工男，高数、理论力学、传动控制等一大堆逻辑性较强的学科都能学得有模有样，但博主却也时常“为赋新词强说愁”般会考虑一些比较“没用”的东西。举个栗子，我活着是为了什么？–（你系不系傻？） 高中毕业的暑假，卧在床头完完整整地看完了余华的《活着》，哭哭啼啼地看一个老地主的儿子（“富二代”）跌跌撞撞、充满不幸、动荡的人生，当然他在故事里是活到最久的了。活生生地告诉着一个永恒不变的真理——活着就是为了活着，为了活下去。 我们所处的这个时代，在中国的历史上是最幸福的一个时代，没有战乱，每个人有机会改变自己阶层，没有时不时来的动荡、不会一夜之间就被打入“下层”，不再像《活着》里面所处时代那样的不稳、不安。因此，我们生命的意义，活着的意义就不再是单纯是《活着》那样，为了活着，为了活下去。生命或许在下个时刻、下个角落已经准备好大大的惊喜给我们 。 生命的意义？不知道很正常哦，你怎么就不会装装逼故作正经地来分析一下。 我们的生命，由什么组成呢？我们的身体、思想、时间、家人、朋友、事业、爱好等等组成（以下称为“它们”）。我们换个角度，不要问我生命的意义是什么，请问自己什么是最重要的？不正是如此吗，我们的体、思想、时间、家人、朋友、事业、爱好不正是我们最重要的事情吗？生命的意义就在这里面啦。 或许你会很疑惑，我们的身体、思想、时间、家人、朋友、事业、爱好，不是很普通吗？在这个浩瀚的星河里面，似乎就是沧海一粟。即使一个人是如此的渺小，但你怎么也找不到另外一个和你一模一样的躯体和灵魂（别说克隆可以复制出一个完全一样的个体噢，机遇、思想一大堆不同，故不可能有一模一样的另一个自己）。它们才是意义，它们才是目的。 但还有一个问题哦，甲乙丙丁每个路人都有自己的身体、思想，岂不是每个人都有一样的意义了？就是它们本身？不呢，可有很大的区别呢，要想过得更有自己的个性和味道，那可得像厨师那样为自己的菜肴添加足够的配料，才能烹饪出让人流连忘返的美味菜式。那我们的的“配料”是什么好呢？ 答案很简单，就是一个字，“美”。为你的生活添加“美”的滋味。让自己的生活过着像“一种艺术般感觉”。很简单的，例如，我们都在健身，每天都有锻炼、一次次的喘气、汗水，这个过程就是一个“美美”的滋味，这个过程就是所谓的美。当我们的身体肌肉开始显露线条，肚腩开始逐渐减少，我们很自豪地看着这个结果、这个进步，这个生活的果实也是让人甜的美滋滋的，也是一种美。或者，某一天心血来潮拿起吉他就玩命练习，自嗨完之后，三两天又把它丢在角落，虽然没有能至始至终，但我们不也是收获了快乐、也收获了失败。我的意思很简单，这个过程就是一场“美”的体验旅程，相应的结果无论是好是坏，也是一种“美”的收获。 转过来一想，人生就是这样，岁月就是一个过程，死亡就是最后的结果。别无他讲，只是默默愿你能把自由、追求、美充满这次美的旅途。 —- 时光滋味","categories":[{"name":"essay","slug":"essay","permalink":"http://exploretime.cn/categories/essay/"}],"tags":[]},{"title":"页面实现在线测试功能","slug":"页面实现在线测试功能","date":"2017-04-01T07:53:46.000Z","updated":"2017-04-01T07:55:00.352Z","comments":true,"path":"2017/04/01/页面实现在线测试功能/","link":"","permalink":"http://exploretime.cn/2017/04/01/页面实现在线测试功能/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"console命令详解总结","slug":"console命令详解总结","date":"2017-03-31T03:05:28.000Z","updated":"2017-05-02T01:18:06.535Z","comments":true,"path":"2017/03/31/console命令详解总结/","link":"","permalink":"http://exploretime.cn/2017/03/31/console命令详解总结/","excerpt":"最近时光蓝孩有花时间在学习console的相关知识，这次难得有空，就总结一下它的用法！","text":"最近时光蓝孩有花时间在学习console的相关知识，这次难得有空，就总结一下它的用法！(一).console.assert()语法console.assert(xxx,’yyy’);如果xxx为false,则输出’yyy’;当然yyy的形式可以是多种的：例如obj1[,obj2,…,objN]则会输出数组里面的obj1。解释：判断第一个参数是否为真，false的话抛出异常并且在控制台输出相应信息。举个栗子哦：看一下代码按f12检查控制台所以,第一个参数为真的时候，没有输出，而为false真显示第二个参数的内容。(二).console.clear()清空控制台。——这个就不用再详细解释啦 ——(三).console.count()以参数为标识记录调用的次数，调用时在控制台打印标识以及调用次数。(四).console.dir()打印一条以三角形符号开头的语句，可以点击三角展开查看对象的属性。例如console.dir(outer),请看下图:点击则显示如下噢：(五).console.log()打印字符串，使用方法比较类似C的printf格式输出(六).console.time()计时器，接受一个参数作为标识。备注：参考MDN","categories":[{"name":"front_end","slug":"front-end","permalink":"http://exploretime.cn/categories/front-end/"}],"tags":[]},{"title":"零基础快速搭建个人博客（github+hexo）","slug":"零基础快速搭建个人博客（github-hexo）","date":"2017-03-30T09:02:31.000Z","updated":"2017-05-02T01:22:18.459Z","comments":true,"path":"2017/03/30/零基础快速搭建个人博客（github-hexo）/","link":"","permalink":"http://exploretime.cn/2017/03/30/零基础快速搭建个人博客（github-hexo）/","excerpt":"零基础搭建个人博客（github+hexo）","text":"零基础搭建个人博客（github+hexo） &nbsp; 注释： 如果你一直想尝试搭建属于自己的个人空间，却困于现阶段搜索资料能力的不足，或是没有一个具体的方向。那么，很简单，别在乎别人的看法或者自己的疑虑，只要一步一步按照以下教程做就可以完成了。 &nbsp; 准备： node.js安装 &nbsp; node.js按照路径： Windows Installer 64-bit &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; Windows Installer 32-bit &nbsp; 打开安装包，一路点next即可： &nbsp; 2. &nbsp; GIT安装 Git-2.6.3-64-bit.exe &nbsp;&nbsp;&nbsp;&nbsp;也是一路按默认的安装就行。（点&quot;next&quot;） &nbsp;&nbsp;&nbsp;&nbsp; &nbsp; 3. &nbsp; github账号： github注册 &nbsp; 打开 github &nbsp; ： &nbsp; github创建库 创建好账号登录之后，按下图来建立库： 需要注意的是：respository的内容一定要写你自己的username+&quot;.github.oi&quot; &nbsp; github修改设置: &nbsp;&nbsp;&nbsp;&nbsp;点开创建的库，打开设置，点击&quot;settings&quot;，： &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;往下拉到&quot;GitHub Pages&quot;，再到&quot;Custom domain&quot;修改，填下自己的域名地址 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;点击保存&quot;save&quot;(域名没有？没关系，第四步就是域名的申请，请先跳到那里。) &nbsp; （以上三步详细步骤可参考： Xuanwo&#39;s Blog史上最详细的Hexo博客搭建图文教程 &nbsp; ） 4. &nbsp; 阿里云（申请个人域名、域名解析） &nbsp; 先申请一个阿里云的账号 之后点击购买域名：（鼠标移动到&quot;产品&quot;-&gt;&quot;域名与网站(万维)&quot;-&gt;&quot;域名注册&quot;) 自动跳转到查询域名的页面:(在搜索框里面填写你自己设想好的域名,点击&quot;查域名&quot;) &nbsp; 自动跳转到查询结果页面: &nbsp; 找到自己心仪的网站就下手买，之后去结算。 注意：下面是有一个优惠口令的，土豪请选择性跳过V●ᴥ●V。时光大哥我当时支付的时候是有5块的优惠。 有了个人的域名之后，就可以登录阿里云的控制台进行高大上的&quot;云解释&quot;:(阿里的产品确实丰富得让人眼花缭乱,但我们不能这么快就&quot;fllow your heart&quot;(怂),一步一步来!) 点击&quot;产品与服务&quot;-&gt;&quot;云解析DNS &quot; &nbsp; 点击&quot;解析&quot; 如果不懂,就直接点&quot;新人指导&quot;;否则按下面的来:点击&quot;添加解析&quot; 新建两个解析:第一个主机记录填&quot;www&quot;,记录值则填&quot;你的域名&quot;的ip值 但问题来了,我怎么知道github.io的ip值呢? &nbsp; 很简单,点击： 域名ip查询 &nbsp; （输入你的域名，点击&quot;查询&quot;） &nbsp; 再把ip值填到云解析，点击&quot;保存&quot;。 第二个解析参考上一步，但不同的是主机记录要改成“@”。 现在终于把搭建博客的前期准备做好了，剩下的就只剩下建站啦（走到这一步已经没剩下多少东西了噢） &nbsp; 安装hexo 首先在一个自己的工作文件里面建立一个文件夹如&quot;blog&quot;; 右击点开&quot;Git Bash here&quot;,然后输入指令，会出现以下窗口： &nbsp; 往里面输入指令： npm install -g hexo-cli （——稍等片刻，电脑正在安装hexo呢—–）之后开始初始化我们的博客：$ hexo init &lt;folder&gt;新建一个为&quot;folder&quot;的文件 之后再进入该文件夹：$ cd folder 进入之后开始安装$ npm install 安装完之后，可以看到文件夹里面增添了许多内容： 开始修改配置：打开_config.yml的文件(建议用sublime)， 往下拉到底部，一定要修改好deploy的配置(&quot;部署&quot;):参照下图修改（记得每一个冒号(&quot;：&quot;)之后一定要有一个空格） 以上都部署好之后，就准备可以在浏览器浏览拉，在git里面输入指令：$ hexo clean$ hexo generate$ hexo server以上三步完成之后，就可以到浏览器里面输入：http://localhost:4000/来查看啦（“是不是很好玩？啦啦啦......”）以上已经把个人静态博客搭建好了。之后的添加文章，改变主题等功能,详细内容请参考:hexo 开发文档本文参考： Xuanwo&#39;s Blog ：《史上最详细的Hexo博客搭建图文教程》代码咖啡：《20分钟教你使用hexo搭建github博客》hexo 开发文档","categories":[{"name":"front_end","slug":"front-end","permalink":"http://exploretime.cn/categories/front-end/"}],"tags":[]},{"title":"iqd","slug":"iqd","date":"2017-03-29T15:02:21.000Z","updated":"2017-03-31T13:35:47.534Z","comments":true,"path":"2017/03/29/iqd/","link":"","permalink":"http://exploretime.cn/2017/03/29/iqd/","excerpt":"","text":"再一次检查左侧标签的内容分类是否可以。 继续测试 今天一直在想着写一篇好的博文，先把hexo+github的静态博客再熟悉一下先。 今天一直在想着写一篇好的博文，先把hexo+github的静态博客再熟悉一下先。 今天一直在想着写一篇好的博文，先把hexo+github的静态博客再熟悉一下先。 是吗，好好玩哦","categories":[{"name":"front-end","slug":"front-end","permalink":"http://exploretime.cn/categories/front-end/"}],"tags":[{"name":"技术笔记","slug":"技术笔记","permalink":"http://exploretime.cn/tags/技术笔记/"}]},{"title":"Hello World","slug":"hello-world","date":"2017-03-27T12:51:56.744Z","updated":"2017-03-27T12:51:56.744Z","comments":true,"path":"2017/03/27/hello-world/","link":"","permalink":"http://exploretime.cn/2017/03/27/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]